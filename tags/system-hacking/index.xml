<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>System Hacking on T43W00</title><link>https://t43w00.netlify.app/tags/system-hacking/</link><description>Recent content in System Hacking on T43W00</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 26 Sep 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://t43w00.netlify.app/tags/system-hacking/index.xml" rel="self" type="application/rss+xml"/><item><title>Layer7 시스템 해킹 1차시</title><link>https://t43w00.netlify.app/p/layer7-%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%95%B4%ED%82%B9-1%EC%B0%A8%EC%8B%9C/</link><pubDate>Fri, 26 Sep 2025 00:00:00 +0000</pubDate><guid>https://t43w00.netlify.app/p/layer7-%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%95%B4%ED%82%B9-1%EC%B0%A8%EC%8B%9C/</guid><description>&lt;h2 id="dreamhack-학습-정리--pwntools-기초"&gt;Dreamhack 학습 정리 (~ pwntools 기초)
&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id="컴퓨터-아키텍처"&gt;컴퓨터 아키텍처
&lt;/h3&gt;&lt;p&gt;컴퓨터 아키텍처는 컴퓨터에 관한 설계를 뜻한다.&lt;/p&gt;
&lt;p&gt;컴퓨터 아키텍처는 명령어적 설계인 명령어 집합구조(Instruction Set Architecture)와 하드웨어적 설계인 마이크로 아키텍처(Micro Architecture)로 나뉜다.&lt;/p&gt;
&lt;p&gt;특히 CPU가 컴퓨터의 동작에 핵심적인 역할을 하기 때문에, 명령어 집합구조를 알 필요가 있다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="폰-노이만-구조"&gt;폰 노이만 구조
&lt;/h3&gt;&lt;p&gt;근대의 컴퓨터는 폰 노이만 구조에 기반을 둔다.&lt;/p&gt;
&lt;p&gt;폰 노이만 구조는 &lt;strong&gt;연산&lt;/strong&gt;, &lt;strong&gt;제어&lt;/strong&gt;, &lt;strong&gt;저장&lt;/strong&gt;의 세 가지 핵심 기능이 필요로 한다.&lt;/p&gt;
&lt;p&gt;근대의 컴퓨터는 CPU가 &lt;strong&gt;연산&lt;/strong&gt;과 &lt;strong&gt;제어&lt;/strong&gt;를, 메모리가 &lt;strong&gt;저장&lt;/strong&gt;을 담당한다.&lt;/p&gt;
&lt;p&gt;또한 버스(Bus)라는 전자 통로가 추가적으로 존재하는데, 장치간 데이터나 제어 신호를 교환하기 위해 사용한다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="명령어-집합-구조"&gt;명령어 집합 구조
&lt;/h3&gt;&lt;p&gt;명령어 집합 구조는 크게 &lt;strong&gt;CISC&lt;/strong&gt;와 &lt;strong&gt;RISC&lt;/strong&gt; 두 가지로 나눈다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CISC&lt;/code&gt; : 70년대에 메모리 효율성에 맞춰 개발된 명령어 집합 구조이다. 예로는 x86-64가 이를 사용한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RISC&lt;/code&gt; : 80년대에 CISC 구조의 단점을 개선하여 나온 명령어 집합 구조이며, 명령어 길이가 짧고 고정된 길이의 명령어만 사용한다. 예로는 ARM과 MIPS가 이를 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;아직 x86-64 아키텍처를 PC에서 가장 보편적으로 사용하기 때문에 이를 깊게 공부할 필요가 있다.&lt;/p&gt;
&lt;p&gt;x86-64의 이름을 봐도 알 수 있듯이 32비트와 64비트를 모두 호환하여 지원하는 아키텍처인데, 여기서 말하는 n비트는 cpu가 한번에 처리할 수 있는 데이터의 크기를 말한다.&lt;/p&gt;
&lt;p&gt;또한 WORD라는 표현은 16비트를 말하는데, WORD 또한 CPU로 한 번에 처리할 수 있는 데이터의 크기를 이르는 말이었지만, 16비트를 사용할 때 쓰던 WORD가 굳어져 쓰이게 되었다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="x86-64-레지스터"&gt;x86-64: 레지스터
&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id="범용-레지스터"&gt;범용 레지스터
&lt;/h4&gt;&lt;p&gt;주로 데이터 연산을 위해 사용하는 레지스터이다.&lt;/p&gt;
&lt;p&gt;특정 레지스터의 경우 주로 사용하는 용도가 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rax&lt;/code&gt; : 함수의 반환값&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rcx&lt;/code&gt; : 반복문 카운터&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rsi&lt;/code&gt; : 데이터 원본 포인터&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rdi&lt;/code&gt; : 데이터 목적지 포인터&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rsp&lt;/code&gt; : 스택 포인터&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rbp&lt;/code&gt; : 스택 베이스 포인터&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id="세그먼트-레지스터"&gt;세그먼트 레지스터
&lt;/h4&gt;&lt;p&gt;메모리를 세그먼트 단위로 접근할 때 사용하는 특수한 레지스터이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CS&lt;/code&gt; : 실행할 코드의 시작 주소 저장&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DS&lt;/code&gt; : 데이터 영역의 시작 주소 저장&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SS&lt;/code&gt; : 스택 영역의 시작 주소 저장&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ES&lt;/code&gt;, &lt;code&gt;FS&lt;/code&gt;, &lt;code&gt;GS&lt;/code&gt; : 범용적인 용도로 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id="명령어-포인터-레지스터"&gt;명령어 포인터 레지스터
&lt;/h4&gt;&lt;p&gt;명령어 포인터 레지스터는 CPU가 어느 부분의 코드를 실행할지 가리키는 역할을 한다.&lt;/p&gt;
&lt;p&gt;x64 아키텍처에서의 명령어 포인터 레지스터는 &lt;code&gt;rip&lt;/code&gt;이다.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id="플래그-레지스터"&gt;플래그 레지스터
&lt;/h4&gt;&lt;p&gt;플래그 레지스터는 CPU가 연산을 수행한 후 결과의 상태를 저장하는 레지스터이다.&lt;/p&gt;
&lt;p&gt;대표적으로는 ZF, CF, SF, OF 등이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ZF&lt;/code&gt; : 연산 결과가 0인 경우 설정&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CF&lt;/code&gt; : 올림수가 있는 경우 설정&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SF&lt;/code&gt; : 연산 결과가 음수인 경우 설정&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OF&lt;/code&gt; : 오버플로우 발생 시 설정&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="메모리-레이아웃"&gt;메모리 레이아웃
&lt;/h3&gt;&lt;p&gt;리눅스에서 프로세스의 메모리는 크게 5가지 세그먼트로 구분한다.&lt;/p&gt;
&lt;p&gt;코드, 데이터, BSS, 힙, 스택이 있다.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id="코드-세그먼트-r---x"&gt;코드 세그먼트 (R - X)
&lt;/h4&gt;&lt;p&gt;실행 가능한 기계어 코드가 위치하는 영역이다. 가장 낮은 주소에 위치한다.&lt;/p&gt;
&lt;p&gt;쓰기 권한이 주어지지 않는 이유는 취약점을 통해 악의적인 공격이 가능하기 때문이다.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id="데이터-세그먼트-r-w----r----"&gt;데이터 세그먼트 (R W - / R - -)
&lt;/h4&gt;&lt;p&gt;컴파일 시점에서 값이 정해진 전역 변수 및 전역 상수들이 위치하는 영역이다.&lt;/p&gt;
&lt;p&gt;데이터 세그먼트의 경우에는 쓰기 가능한 영역과 불가능한 영역으로 다시 나뉜다.&lt;/p&gt;
&lt;p&gt;rodata 영역은 쓰기 불가능한 읽기 전용 영역이다.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id="bss-세그먼트-r-w--"&gt;BSS 세그먼트 (R W -)
&lt;/h4&gt;&lt;p&gt;컴파일 시점에 값이 정해지지 않은 전역 변수가 위치하는 영역이다.&lt;/p&gt;
&lt;p&gt;초기화되지 않은 값은 프로그램이 시작될 때 0으로 초기화된다.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id="스택-세그먼트-r-w--"&gt;스택 세그먼트 (R W -)
&lt;/h4&gt;&lt;p&gt;프로세스의 스택이 위치하는 영역이다.&lt;/p&gt;
&lt;p&gt;함수의 매개변수나 지역 변수와 같은 임시 변수들이 이곳에 저장된다.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id="힙-세그먼트-r---x"&gt;힙 세그먼트 (R - X)
&lt;/h4&gt;&lt;p&gt;동적으로 할당받는 메모리가 위치하는 영역이다.&lt;/p&gt;
&lt;p&gt;힙 세그먼트는 스택 세그먼트와 반대 방향으로 자란다. (낮은 주소에서 높은 주소로)&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="어셈블리어"&gt;어셈블리어
&lt;/h3&gt;&lt;p&gt;어셈블리어는 기계어와 1대1 대응되는 저수준 언어이다.&lt;/p&gt;
&lt;p&gt;기계어를 보다 쉽게 이해하고 분석하기 위해 사용한다.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id="문법-구조"&gt;문법 구조
&lt;/h4&gt;&lt;p&gt;어셈블리어의 기본 문법 구조는 명령어(Opcode)와 피연산자(Operand)로 구성된다.&lt;/p&gt;
&lt;p&gt;예를 들어, &lt;code&gt;mov rax, 0x30&lt;/code&gt;에서 명령어는 &lt;code&gt;mov&lt;/code&gt;이고, 피연산자는 &lt;code&gt;rax&lt;/code&gt;와 &lt;code&gt;0x30&lt;/code&gt;이다.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id="명령어-종류"&gt;명령어 종류
&lt;/h4&gt;&lt;p&gt;어셈블리어에는 매우 많은 명령어가 존재하지만 자주 사용되는 것은 저절로 알게 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터 이동 : &lt;code&gt;mov&lt;/code&gt;, &lt;code&gt;lea&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;산술 연산 : &lt;code&gt;inc&lt;/code&gt;, &lt;code&gt;dec&lt;/code&gt;, &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;sub&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;논리 연산 : &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;xor&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;비교 : &lt;code&gt;cmp&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;분기 : &lt;code&gt;jmp&lt;/code&gt;, &lt;code&gt;je&lt;/code&gt;, &lt;code&gt;jg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;스택 : &lt;code&gt;pop&lt;/code&gt;, &lt;code&gt;push&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;프로시저 : &lt;code&gt;call&lt;/code&gt;, &lt;code&gt;ret&lt;/code&gt;, &lt;code&gt;leave&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;시스템 콜 : &lt;code&gt;syscall&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id="gdb"&gt;GDB
&lt;/h3&gt;&lt;p&gt;GDB는 바이너리를 디버깅하기 위한 도구이다.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id="명령어-종류-1"&gt;명령어 종류
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;file&lt;/code&gt; : 파일 불러오기
&lt;code&gt;run&lt;/code&gt; : 실행
&lt;code&gt;break&lt;/code&gt; : 중단점 설정
&lt;code&gt;ni&lt;/code&gt; : 다음 코드 실행
&lt;code&gt;si&lt;/code&gt; : 다음 코드 실행 (함수 내부로 진입)
&lt;code&gt;disassemble&lt;/code&gt; : 디스어셈블 코드 출력
&lt;code&gt;x&lt;/code&gt; : 메모리 값 확인
&lt;code&gt;vmmap&lt;/code&gt; : 가상 메모리 레이아웃 확인
&lt;code&gt;set&lt;/code&gt; : 메모리 값 설정&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id="exercise-gdb"&gt;Exercise: GDB
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;b flag_1&lt;/code&gt; 명령어로 중단점을 설정한 뒤 실행하고, &lt;code&gt;finish&lt;/code&gt; 명령어로 &lt;code&gt;flag_1&lt;/code&gt; 함수를 끝까지 실행하게 되면 &lt;code&gt;rax&lt;/code&gt; 레지스터에서 반환값을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://t43w00.netlify.app/p/layer7-%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%95%B4%ED%82%B9-1%EC%B0%A8%EC%8B%9C/image.png"
width="1920"
height="1080"
srcset="https://t43w00.netlify.app/p/layer7-%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%95%B4%ED%82%B9-1%EC%B0%A8%EC%8B%9C/image_hu_2769487db543f294.png 480w, https://t43w00.netlify.app/p/layer7-%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%95%B4%ED%82%B9-1%EC%B0%A8%EC%8B%9C/image_hu_d33a6519a7b78146.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
&gt;&lt;/p&gt;
&lt;br&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;span class="lnt"&gt;16
&lt;/span&gt;&lt;span class="lnt"&gt;17
&lt;/span&gt;&lt;span class="lnt"&gt;18
&lt;/span&gt;&lt;span class="lnt"&gt;19
&lt;/span&gt;&lt;span class="lnt"&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-plaintext" data-lang="plaintext"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;pwndbg&amp;gt; disassemble
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Dump of assembler code for function main:
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 0x0000000000401156 &amp;lt;+0&amp;gt;: endbr64
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 0x000000000040115a &amp;lt;+4&amp;gt;: push rbp
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 0x000000000040115b &amp;lt;+5&amp;gt;: mov rbp,rsp
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 0x000000000040115e &amp;lt;+8&amp;gt;: lea rax,[rip+0xea3] # 0x402008
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 0x0000000000401165 &amp;lt;+15&amp;gt;: mov rdi,rax
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 0x0000000000401168 &amp;lt;+18&amp;gt;: call 0x401050 &amp;lt;puts@plt&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 0x000000000040116d &amp;lt;+23&amp;gt;: call 0x401198 &amp;lt;flag_1&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;=&amp;gt; 0x0000000000401172 &amp;lt;+28&amp;gt;: movzx eax,BYTE PTR [rip+0x2ea7] # 0x404020 &amp;lt;a&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 0x0000000000401179 &amp;lt;+35&amp;gt;: test al,al
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 0x000000000040117b &amp;lt;+37&amp;gt;: jne 0x401182 &amp;lt;main+44&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 0x000000000040117d &amp;lt;+39&amp;gt;: call 0x401211 &amp;lt;flag_2&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 0x0000000000401182 &amp;lt;+44&amp;gt;: lea rax,[rip+0xea7] # 0x402030
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 0x0000000000401189 &amp;lt;+51&amp;gt;: mov rdi,rax
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 0x000000000040118c &amp;lt;+54&amp;gt;: call 0x401050 &amp;lt;puts@plt&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 0x0000000000401191 &amp;lt;+59&amp;gt;: mov eax,0x0
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 0x0000000000401196 &amp;lt;+64&amp;gt;: pop rbp
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; 0x0000000000401197 &amp;lt;+65&amp;gt;: ret
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;End of assembler dump.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;디스어셈블을 보면 &lt;code&gt;test&lt;/code&gt; 명령어를 통해 &lt;code&gt;al&lt;/code&gt; 레지스터가 0인 경우에만 실행되는 것을 알 수 있는데, 해당 명령어 실행 직전에 &lt;code&gt;set $al = 0&lt;/code&gt; 명령어를 통해 &lt;code&gt;al&lt;/code&gt; 레지스터의 값을 0으로 변경해주면 &lt;code&gt;flag_2&lt;/code&gt; 함수가 실행되어 플래그를 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://t43w00.netlify.app/p/layer7-%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%95%B4%ED%82%B9-1%EC%B0%A8%EC%8B%9C/image-1.png"
width="1920"
height="1080"
srcset="https://t43w00.netlify.app/p/layer7-%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%95%B4%ED%82%B9-1%EC%B0%A8%EC%8B%9C/image-1_hu_55592b6763bf569b.png 480w, https://t43w00.netlify.app/p/layer7-%EC%8B%9C%EC%8A%A4%ED%85%9C-%ED%95%B4%ED%82%B9-1%EC%B0%A8%EC%8B%9C/image-1_hu_d29f2011f75362a1.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="177"
data-flex-basis="426px"
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="pwntools"&gt;pwntools
&lt;/h3&gt;&lt;p&gt;pwntools는 pwnable 분야의 CTF 문제를 푸는 데 도움을 주는 프레임워크이다.&lt;/p&gt;
&lt;p&gt;파이썬에서 사용할 수 있다.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id="함수-종류"&gt;함수 종류
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;process()&lt;/code&gt; : 로컬 바이너리 연결&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remote()&lt;/code&gt; : 원격 서버 연결&lt;/li&gt;
&lt;li&gt;&lt;code&gt;send()&lt;/code&gt; : 데이터 송신&lt;/li&gt;
&lt;li&gt;&lt;code&gt;recv()&lt;/code&gt; : 데이터 수신&lt;/li&gt;
&lt;li&gt;&lt;code&gt;close()&lt;/code&gt; : 연결 종료&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 외에도 다양한 함수가 존재한다.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id="addition-quiz"&gt;addition-quiz
&lt;/h4&gt;&lt;p&gt;파이썬으로 주어진 문제를 파싱하여 더한 값을 전송하는 코드를 작성하였다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pwn&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="c1"&gt;# io = process(&amp;#39;./chall&amp;#39;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;io&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;host8.dreamhack.games&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15434&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recvline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;hr&gt;
&lt;h4 id="flag-shop"&gt;flag-shop
&lt;/h4&gt;&lt;p&gt;파이썬으로 flag에 해당하는 번호를 전송하도록 코드를 작성하였다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;div class="chroma"&gt;
&lt;table class="lntable"&gt;&lt;tr&gt;&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code&gt;&lt;span class="lnt"&gt; 1
&lt;/span&gt;&lt;span class="lnt"&gt; 2
&lt;/span&gt;&lt;span class="lnt"&gt; 3
&lt;/span&gt;&lt;span class="lnt"&gt; 4
&lt;/span&gt;&lt;span class="lnt"&gt; 5
&lt;/span&gt;&lt;span class="lnt"&gt; 6
&lt;/span&gt;&lt;span class="lnt"&gt; 7
&lt;/span&gt;&lt;span class="lnt"&gt; 8
&lt;/span&gt;&lt;span class="lnt"&gt; 9
&lt;/span&gt;&lt;span class="lnt"&gt;10
&lt;/span&gt;&lt;span class="lnt"&gt;11
&lt;/span&gt;&lt;span class="lnt"&gt;12
&lt;/span&gt;&lt;span class="lnt"&gt;13
&lt;/span&gt;&lt;span class="lnt"&gt;14
&lt;/span&gt;&lt;span class="lnt"&gt;15
&lt;/span&gt;&lt;span class="lnt"&gt;16
&lt;/span&gt;&lt;span class="lnt"&gt;17
&lt;/span&gt;&lt;span class="lnt"&gt;18
&lt;/span&gt;&lt;span class="lnt"&gt;19
&lt;/span&gt;&lt;span class="lnt"&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class="lntd"&gt;
&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-python" data-lang="python"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pwn&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;io&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;host8.dreamhack.games&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16567&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;cnt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recvuntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;. &amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recvline&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;#34;flag&amp;#34;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recvuntil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;#34;&amp;gt; &amp;#34;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; &lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description></item></channel></rss>